import { NextRequest, NextResponse } from 'next/server';
import { gemini15Flash } from '@genkit-ai/googleai';
import { ai } from '@/ai/genkit';
import { firestoreService } from '@/lib/firestore-service';
import { format, addDays, parse } from 'date-fns';

interface ShiftInfo {
  code: string;
  startTime: string;
  endTime: string;
  color: string;
}

const SHIFT_TYPES: Record<string, ShiftInfo> = {
  'L2': { code: 'L2', startTime: '14:00', endTime: '23:00', color: '#10B981' }, // Green
  'D2': { code: 'D2', startTime: '06:00', endTime: '14:00', color: '#F59E0B' }, // Yellow
  'T2': { code: 'T2', startTime: '22:00', endTime: '07:00', color: '#EF4444' }, // Red
  'OFF': { code: 'OFF', startTime: '', endTime: '', color: '#6B7280' }, // Gray - Day off
};

export async function POST(request: NextRequest) {
  try {
    const formData = await request.formData();
    const imageFile = formData.get('image') as File;
    const familyId = formData.get('familyId') as string;

    if (!imageFile) {
      return NextResponse.json({ 
        success: false, 
        error: 'Kh√¥ng t√¨m th·∫•y file ·∫£nh' 
      }, { status: 400 });
    }

    // Convert image to base64
    const bytes = await imageFile.arrayBuffer();
    const base64Image = Buffer.from(bytes).toString('base64');

    // Get current date info for context
    const now = new Date();
    const currentYear = now.getFullYear();
    const currentMonth = now.getMonth() + 1;
    
    // Use AI to analyze the work schedule image
    const aiPrompt = `
B·∫°n l√† AI chuy√™n ph√¢n t√≠ch l·ªãch l√†m vi·ªác. H√£y ph√¢n t√≠ch ·∫£nh l·ªãch l√†m vi·ªác n√†y v√† tr√≠ch xu·∫•t th√¥ng tin:

TH√îNG TIN NG√ÄY HI·ªÜN T·∫†I: ${now.toISOString().split('T')[0]} (${currentYear}/${currentMonth})

QUAN TR·ªåNG - T√åM ƒê√öNG NG∆Ø·ªúI: 
- T√åM CH√çNH X√ÅC t√™n "Ng√¥ Minh Hi·∫øu" ho·∫∑c "M.Hieu" trong c·ªôt Name
- KH√îNG ƒë∆∞·ª£c nh·∫ßm v·ªõi "Nguy·ªÖn Minh Tu·∫•n" hay "Nguy·ªÖn Ng·ªçc Hi·∫øu" 
- CH·ªà l·∫•y l·ªãch l√†m vi·ªác c·ªßa d√≤ng "Ng√¥ Minh Hi·∫øu"
- ƒê·ªçc ch√≠nh x√°c text trong t·ª´ng √¥ c·ªßa ƒê√öNG h√†ng Minh Hi·∫øu

C√ÅC LO·∫†I CA L√ÄM VI·ªÜC CHO MINH HI·∫æU:
- L2 (m√†u xanh l√°): Ca chi·ªÅu 14:00-23:00
- D2 (m√†u v√†ng): Ca s√°ng 06:00-14:00  
- T2 (m√†u ƒë·ªè): Ca t·ªëi 22:00-07:00
- OFF (m√†u x√°m/tr·∫Øng): NGH·ªà PH√âP - KH√îNG L√ÄM VI·ªÜC
- B·∫•t k·ª≥ m√£ kh√°c (E3, AL, CE...) = NGH·ªà ho·∫∑c kh√¥ng ph·∫£i Minh Hi·∫øu

QUY T·∫ÆC PH√ÇN T√çCH NGHI√äM NG·∫∂T:
- CH·ªà l∆∞u khi th·∫•y R√ï R√ÄNG trong h√†ng Minh Hi·∫øu: "L2", "D2", "T2"
- L2 = ca chi·ªÅu (14:00-23:00)
- D2 = ca s√°ng (06:00-14:00)  
- T2 = ca t·ªëi (22:00-07:00)
- M·ªåI TR∆Ø·ªúNG H·ª¢P KH√ÅC = NGH·ªà (kh√¥ng l∆∞u):
  + Text "OFF" = ngh·ªâ ph√©p
  + Text "AL" = ngh·ªâ annual leave
  + Text "E3" = ca c·ªßa ng∆∞·ªùi kh√°c, KH√îNG ph·∫£i Minh Hi·∫øu
  + Text "CE" = kh√¥ng r√µ, coi nh∆∞ ngh·ªâ
  + √î tr·ªëng = ngh·ªâ
  + Text kh√¥ng r√µ = ngh·ªâ
  + B·∫•t k·ª≥ k√Ω t·ª± n√†o kh√°c = ngh·ªâ

LOGIC NƒÇM TH√îNG MINH:
- N·∫øu ·∫£nh kh√¥ng c√≥ nƒÉm r√µ r√†ng, m·∫∑c ƒë·ªãnh s·ª≠ d·ª•ng nƒÉm hi·ªán t·∫°i: ${currentYear}
- N·∫øu th√°ng trong ·∫£nh < th√°ng hi·ªán t·∫°i, c√≥ th·ªÉ l√† nƒÉm sau: ${currentYear + 1}
- ∆Øu ti√™n logic: nƒÉm hi·ªán t·∫°i (${currentYear}) -> nƒÉm sau (${currentYear + 1}) -> nƒÉm tr∆∞·ªõc (${currentYear - 1})

ƒê·ªãnh d·∫°ng tr·∫£ v·ªÅ JSON (CH·ªà G·ªíM NH·ªÆNG NG√ÄY C√ì CA L√ÄM VI·ªÜC):
{
  "employee": "Ng√¥ Minh Hi·∫øu",
  "month": "s·ªë th√°ng (1-12)",
  "year": ${currentYear}, 
  "schedules": [
    {
      "day": "s·ªë ng√†y (1-31)",
      "shift": "L2|D2|T2",
      "date": "YYYY-MM-DD"
    }
  ]
}

V√ç D·ª§ TH·ª∞C T·∫æ TRONG H√ÄNG MINH HI·∫æU:
- Ng√†y c√≥ text "L2" ‚Üí L∆∞u ca chi·ªÅu
- Ng√†y c√≥ text "D2" ‚Üí L∆∞u ca s√°ng  
- Ng√†y c√≥ text "T2" ‚Üí L∆∞u ca t·ªëi
- Ng√†y c√≥ text "OFF" ‚Üí B·ªè qua (ngh·ªâ)
- Ng√†y c√≥ text "AL" ‚Üí B·ªè qua (ngh·ªâ annual leave)
- Ng√†y c√≥ text "E3" ‚Üí B·ªè qua (ca c·ªßa ng∆∞·ªùi kh√°c)
- Ng√†y c√≥ text "CE" ‚Üí B·ªè qua (kh√¥ng r√µ)
- Ng√†y tr·ªëng ho·∫∑c text l·∫° ‚Üí B·ªè qua (ngh·ªâ)

NGUY√äN T·∫ÆC: Ch·ªâ ch·∫Øc ch·∫Øn 100% m·ªõi l∆∞u, nghi ng·ªù th√¨ b·ªè qua.

N·∫øu kh√¥ng t√¨m th·∫•y th√¥ng tin, tr·∫£ v·ªÅ: {"error": "Kh√¥ng t√¨m th·∫•y l·ªãch l√†m vi·ªác c·ªßa Ng√¥ Minh Hi·∫øu"}
`;

    console.log('ü§ñ Analyzing work schedule image with AI...');
    
    const aiResponse = await ai.generate({
      model: gemini15Flash,
      prompt: [
        {
          text: aiPrompt,
        },
        {
          media: {
            url: `data:image/jpeg;base64,${base64Image}`,
          },
        },
      ],
    });

    console.log('ü§ñ AI Response:', aiResponse.text);
    
    // Log raw response for debugging
    console.log('üîç [DEBUG] Raw AI Response Text:', JSON.stringify(aiResponse.text));

    // Parse AI response
    let scheduleData;
    try {
      // Clean the response text to extract JSON
      let cleanedResponse = aiResponse.text.trim();
      
      // Remove markdown code blocks if present
      if (cleanedResponse.startsWith('```json')) {
        cleanedResponse = cleanedResponse.replace(/```json\n?/, '').replace(/\n?```$/, '');
      } else if (cleanedResponse.startsWith('```')) {
        cleanedResponse = cleanedResponse.replace(/```\n?/, '').replace(/\n?```$/, '');
      }
      
      scheduleData = JSON.parse(cleanedResponse);
      console.log('üìã [DEBUG] Parsed schedule data:', JSON.stringify(scheduleData, null, 2));
    } catch (parseError) {
      console.error('Error parsing AI response:', parseError);
      console.error('üîç [DEBUG] Failed to parse response. Raw text:', aiResponse.text);
      return NextResponse.json({
        success: false,
        error: 'AI kh√¥ng th·ªÉ ph√¢n t√≠ch ·∫£nh l·ªãch l√†m vi·ªác'
      }, { status: 500 });
    }

    if (scheduleData.error) {
      return NextResponse.json({
        success: false,
        error: scheduleData.error
      }, { status: 400 });
    }

    // Smart year correction logic
    let correctedYear = scheduleData.year;
    const detectedMonth = scheduleData.month;
    
    // If AI detected a year that's too far in the past, auto-correct it
    if (correctedYear < currentYear - 1) {
      console.log(`ü§ñ AI detected year ${correctedYear}, correcting to ${currentYear}`);
      correctedYear = currentYear;
    }
    
    // If month is in the past and year is current year, might be next year
    if (detectedMonth < currentMonth && correctedYear === currentYear) {
      correctedYear = currentYear + 1;
      console.log(`ü§ñ Month ${detectedMonth} < current ${currentMonth}, assuming next year ${correctedYear}`);
    }

    // Update scheduleData with corrected year
    scheduleData.year = correctedYear;

    // IMPORTANT: Clear existing schedules for Minh Hi·∫øu in this month before adding new ones
    console.log(`üóëÔ∏è Clearing existing schedules for Minh Hi·∫øu in ${correctedYear}/${detectedMonth}...`);
    try {
      await firestoreService.deleteWorkSchedulesByEmployeeAndMonth(
        familyId, 
        'Minh Hi·∫øu', 
        correctedYear, 
        detectedMonth
      );
      console.log(`‚úÖ Cleared existing schedules for Minh Hi·∫øu`);
    } catch (error) {
      console.error('Error clearing existing schedules:', error);
      // Continue anyway - better to have duplicates than fail completely
    }

    // Convert to work schedules
    const workSchedules = [];
    const notifications = [];
    let processedCount = 0;

    for (const schedule of scheduleData.schedules) {
      console.log(`üîç [DEBUG] Processing day ${schedule.day}: shift="${schedule.shift}"`);
      
      // Only accept exact working shifts for Minh Hi·∫øu: L2, D2, T2
      if (!['L2', 'D2', 'T2'].includes(schedule.shift)) {
        console.log(`‚è≠Ô∏è Skipping non-working day: ${schedule.day} (shift: ${schedule.shift}) - M·∫∑c ƒë·ªãnh ngh·ªâ`);
        continue;
      }
      
      console.log(`‚úÖ [DEBUG] Day ${schedule.day} accepted: shift=${schedule.shift}`);

      const shiftInfo = SHIFT_TYPES[schedule.shift];
      if (!shiftInfo) {
        console.log(`‚ùå Unknown shift type: ${schedule.shift} for day ${schedule.day}`);
        continue;
      }

      // Reconstruct date with corrected year
      const correctedDate = `${correctedYear}-${String(detectedMonth).padStart(2, '0')}-${String(schedule.day).padStart(2, '0')}`;

      const workSchedule = {
        familyId: familyId,
        employeeName: 'Minh Hi·∫øu' as const,
        title: `Ca ${shiftInfo.code} - ${schedule.shift === 'L2' ? 'Chi·ªÅu' : schedule.shift === 'D2' ? 'S√°ng' : 'T·ªëi'}`,
        startTime: shiftInfo.startTime,
        endTime: shiftInfo.endTime,
        date: correctedDate,
        isRecurring: false,
        location: 'C√¥ng ty MIS',
        notes: `Ca l√†m vi·ªác ${shiftInfo.code}`,
        color: shiftInfo.color
      };

      // Save to database
      await firestoreService.addWorkSchedule(workSchedule);
      workSchedules.push(workSchedule);
      processedCount++;

      // Create notification
      const shiftName = schedule.shift === 'L2' ? 'ca chi·ªÅu (14:00-23:00)' : 
                       schedule.shift === 'D2' ? 'ca s√°ng (06:00-14:00)' : 
                       'ca t·ªëi (22:00-07:00)';
      
      notifications.push(`${format(new Date(correctedDate), 'dd/MM')}: ${shiftName}`);
    }

    console.log(`‚úÖ Processed ${processedCount} work schedules for Minh Hi·∫øu (${correctedYear}/${detectedMonth})`);

    return NextResponse.json({
      success: true,
      schedules: workSchedules,
      notifications: notifications,
      summary: {
        employee: scheduleData.employee,
        month: detectedMonth,
        year: correctedYear,
        totalShifts: processedCount
      }
    });

  } catch (error) {
    console.error('Error processing schedule image:', error);
    return NextResponse.json({
      success: false,
      error: 'L·ªói x·ª≠ l√Ω ·∫£nh l·ªãch l√†m vi·ªác'
    }, { status: 500 });
  }
} 